{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from \"react\";\nconst useFetch = url => {\n  _s();\n  const [data, setData] = useState([]);\n  const [error, setError] = useState(null);\n  const [loading, setLoading] = useState(false);\n  useEffect(() => {\n    const fetchData = async () => {\n      setLoading(true);\n      try {\n        const res = await fetch(url).then(response => {\n          if (!response.ok) {\n            setError('Network response was not ok');\n          }\n          const contentType = response.headers.get('content-type');\n          if (contentType && contentType.includes('application/json')) {\n            return response.json();\n          } else {\n            throw new Error('Response is not JSON');\n          }\n        }).then(json => {\n          responseData = json;\n          console.log('Response is a JSON object:', responseData);\n        }).catch(error => {\n          console.error('There was a problem with the fetch operation:', error);\n        });\n        if (!res.ok) {\n          setError('Failed to fetch');\n        }\n        const result = await res.json();\n        console.log(\"PEPEK: \" + result);\n        setData(result);\n        setLoading(false);\n      } catch (err) {\n        setError(err.message);\n        setLoading(false);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchData();\n  }, [url]);\n  return {\n    data,\n    error,\n    loading\n  };\n};\n_s(useFetch, \"6nhoqVvctpRRYiww7uwVz/g7/BM=\");\nexport default useFetch;","map":{"version":3,"names":["useState","useEffect","useFetch","url","data","setData","error","setError","loading","setLoading","fetchData","res","fetch","then","response","ok","contentType","headers","get","includes","json","Error","responseData","console","log","catch","result","err","message"],"sources":["/home/krossmanzs/Programming/tour-management/frontend/src/hooks/useFetch.js"],"sourcesContent":["import { useState, useEffect } from \"react\";\r\n\r\nconst useFetch = url => {\r\n    const [data, setData] = useState([]);\r\n    const [error, setError] = useState(null);\r\n    const [loading, setLoading] = useState(false);\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            setLoading(true);\r\n            try {\r\n                const res = await fetch(url)\r\n                .then(response => {\r\n                    if (!response.ok) {\r\n                        setError('Network response was not ok');\r\n                    }\r\n                    const contentType = response.headers.\r\n                        get('content-type');\r\n                    if (contentType && contentType.\r\n                            includes('application/json')) {\r\n                        return response.json();\r\n                    } else {\r\n                        throw new Error(\r\n                            'Response is not JSON');\r\n                    }\r\n                })\r\n                .then(json => {\r\n                    responseData = json;\r\n                    console.log(\r\n                        'Response is a JSON object:', \r\n                        responseData);\r\n                })\r\n                .catch(error => {\r\n                    console.error(\r\n                        'There was a problem with the fetch operation:', \r\n                        error);\r\n                });\r\n            \r\n\r\n                if (!res.ok) {\r\n                    setError('Failed to fetch');\r\n                }\r\n\r\n                const result = await res.json();\r\n                console.log(\"PEPEK: \" + result);\r\n                \r\n                setData(result);\r\n                setLoading(false);\r\n\r\n            } catch (err) {\r\n                setError(err.message);\r\n                setLoading(false);\r\n            } finally {\r\n                setLoading(false);\r\n            }\r\n        };\r\n\r\n        fetchData();\r\n    }, [url]);\r\n\r\n    return { data, error, loading };\r\n};\r\n\r\nexport default useFetch;\r\n"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAE3C,MAAMC,QAAQ,GAAGC,GAAG,IAAI;EAAA;EACpB,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGL,QAAQ,CAAC,EAAE,CAAC;EACpC,MAAM,CAACM,KAAK,EAAEC,QAAQ,CAAC,GAAGP,QAAQ,CAAC,IAAI,CAAC;EACxC,MAAM,CAACQ,OAAO,EAAEC,UAAU,CAAC,GAAGT,QAAQ,CAAC,KAAK,CAAC;EAE7CC,SAAS,CAAC,MAAM;IACZ,MAAMS,SAAS,GAAG,YAAY;MAC1BD,UAAU,CAAC,IAAI,CAAC;MAChB,IAAI;QACA,MAAME,GAAG,GAAG,MAAMC,KAAK,CAACT,GAAG,CAAC,CAC3BU,IAAI,CAACC,QAAQ,IAAI;UACd,IAAI,CAACA,QAAQ,CAACC,EAAE,EAAE;YACdR,QAAQ,CAAC,6BAA6B,CAAC;UAC3C;UACA,MAAMS,WAAW,GAAGF,QAAQ,CAACG,OAAO,CAChCC,GAAG,CAAC,cAAc,CAAC;UACvB,IAAIF,WAAW,IAAIA,WAAW,CACtBG,QAAQ,CAAC,kBAAkB,CAAC,EAAE;YAClC,OAAOL,QAAQ,CAACM,IAAI,EAAE;UAC1B,CAAC,MAAM;YACH,MAAM,IAAIC,KAAK,CACX,sBAAsB,CAAC;UAC/B;QACJ,CAAC,CAAC,CACDR,IAAI,CAACO,IAAI,IAAI;UACVE,YAAY,GAAGF,IAAI;UACnBG,OAAO,CAACC,GAAG,CACP,4BAA4B,EAC5BF,YAAY,CAAC;QACrB,CAAC,CAAC,CACDG,KAAK,CAACnB,KAAK,IAAI;UACZiB,OAAO,CAACjB,KAAK,CACT,+CAA+C,EAC/CA,KAAK,CAAC;QACd,CAAC,CAAC;QAGF,IAAI,CAACK,GAAG,CAACI,EAAE,EAAE;UACTR,QAAQ,CAAC,iBAAiB,CAAC;QAC/B;QAEA,MAAMmB,MAAM,GAAG,MAAMf,GAAG,CAACS,IAAI,EAAE;QAC/BG,OAAO,CAACC,GAAG,CAAC,SAAS,GAAGE,MAAM,CAAC;QAE/BrB,OAAO,CAACqB,MAAM,CAAC;QACfjB,UAAU,CAAC,KAAK,CAAC;MAErB,CAAC,CAAC,OAAOkB,GAAG,EAAE;QACVpB,QAAQ,CAACoB,GAAG,CAACC,OAAO,CAAC;QACrBnB,UAAU,CAAC,KAAK,CAAC;MACrB,CAAC,SAAS;QACNA,UAAU,CAAC,KAAK,CAAC;MACrB;IACJ,CAAC;IAEDC,SAAS,EAAE;EACf,CAAC,EAAE,CAACP,GAAG,CAAC,CAAC;EAET,OAAO;IAAEC,IAAI;IAAEE,KAAK;IAAEE;EAAQ,CAAC;AACnC,CAAC;AAAC,GA3DIN,QAAQ;AA6Dd,eAAeA,QAAQ"},"metadata":{},"sourceType":"module","externalDependencies":[]}